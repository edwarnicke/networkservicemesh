version: 2
jobs:
  gomod:
    working_directory: /go/src/github.com/networkservicemesh/networkservicemesh
    docker:
      - image: circleci/golang:1.11
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            make docker-gomod-build
  build:
    working_directory: /go/src/github.com/networkservicemesh/networkservicemesh
    docker:
      - image: circleci/golang:1.11
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            make docker-build-build
  unittests:
    working_directory: /go/src/github.com/networkservicemesh/networkservicemesh
    docker:
      - image: circleci/golang:1.11
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run: mkdir -p ~/junit
      - run:
          command: |
            make docker-unittests-build
            docker run networkservicemesh/unittests:latest cat /junit/unit-tests.xml > ~/junit/unit-tests.xml.xml
  shellcheck:
    working_directory: /go/src/github.com/networkservicemesh/networkservicemesh
    docker:
      - image: circleci/golang:1.11
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            make docker-shellcheck-build
  yamllint:
    working_directory: /go/src/github.com/networkservicemesh/networkservicemesh
    docker:
      - image: circleci/golang:1.11
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            make docker-yamllint-build

  packet-deploy:
    docker:
      - image: circleci/golang:1.11
    steps:
      - checkout
      - run: pwd
      - run: ls
      - run: wget https://releases.hashicorp.com/terraform/0.11.10/terraform_0.11.10_linux_amd64.zip
      - run: unzip terraform_0.11.10_linux_amd64.zip
      - run: mv terraform /go/bin/
      - run: mkdir data
      - run: ssh-keygen -t rsa -f data/sshkey -q -N ""
      - run: ssh-add data/sshkey
      - run: .circleci/provision.sh
      - run: make packet-get-kubeconfig
      - run: cp kubeconfig data/
      - run: cp -a scripts/terraform/ data/
      - run:
          when: on_fail
          command: .circleci/destroy-cluster.sh
      - save_cache:
          key: cncf-data-{{.Environment.CIRCLE_WORKFLOW_ID}}
          paths:
            - data

  packet-integration-tests:
    working_directory: /go/src/github.com/networkservicemesh/networkservicemesh
    docker:
      - image: circleci/golang:1.11
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            sudo mkdir -p /cncf/data
            sudo chown -R circleci:circleci /cncf/
          name: Cache Prep
      - restore_cache:
          key: cncf-data-{{.Environment.CIRCLE_WORKFLOW_ID}}
      - run:
          command: |
            mkdir -p ./scripts/vagrant/.kube/ ~/junit
            cp /home/circleci/project/data/kubeconfig ./scripts/vagrant/.kube/config
            make docker-integrationtests-build
            docker run networkservicemesh/integrationtests:latest cat /junit/integration-tests.xml > ~/junit/integration-tests.xml
          name: Run Integration Tests
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit
      - run:
          when: always
          name: Dump K8s state
          command: |
            docker run networkservicemesh/integrationtests:latest kubectl get pods -o wide
            docker run networkservicemesh/integrationtests:latest kubectl get nodes
      - run:
          when: on_fail
          name: Trigger packet-destroy
          command: |
            curl --user ${CIRCLE_API_PROJECT_TOKEN}: \
                --data build_parameters[CIRCLE_JOB]=packet-destroy \
                --data build_parameters[CIRCLE_WORKFLOW_ID]=${CIRCLE_WORKFLOW_ID} \
                --data revision=$CIRCLE_SHA1 \
                https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/tree/$CIRCLE_BRANCH

  packet-destroy:
    docker:
      - image: circleci/golang:1.11
    steps:
      - checkout
      - run:
          command: |
            sudo mkdir -p /cncf/data
            sudo chown -R circleci:circleci /cncf/
          name: Cache Prep
      - restore_cache:
          key: cncf-data-{{.Environment.CIRCLE_WORKFLOW_ID}}
      - run: wget https://releases.hashicorp.com/terraform/0.11.10/terraform_0.11.10_linux_amd64.zip
      - run: unzip terraform_0.11.10_linux_amd64.zip
      - run: mv terraform /go/bin/
      - run: cp -a data/terraform/* ./scripts/terraform/
      - run: cd ./scripts/terraform && terraform init && cd ../..
      - run: .circleci/destroy-cluster.sh

  build-nsmd:
    working_directory: /go/src/github.com/networkservicemesh/networkservicemesh/
    docker:
      - image: circleci/golang:1.11
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export BUILD_TAG="circle-${CIRCLE_BUILD_NUM}"
            export TAG="$BUILD_TAG"
            make docker-nsmd-build
            make docker-nsmd-push
  build-nsmd-k8s:
    working_directory: /go/src/github.com/networkservicemesh/networkservicemesh/
    docker:
      - image: circleci/golang:1.11
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export BUILD_TAG="circle-${CIRCLE_BUILD_NUM}"
            export TAG="$BUILD_TAG"
            make docker-nsmd-k8s-build
            make docker-nsmd-k8s-push
  build-nsmdp:
    working_directory: /go/src/github.com/networkservicemesh/networkservicemesh/
    docker:
      - image: circleci/golang:1.11
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export BUILD_TAG="circle-${CIRCLE_BUILD_NUM}"
            export TAG="$BUILD_TAG"
            make docker-nsmdp-build
            make docker-nsmdp-push
  build-crossconnect-monitor:
    working_directory: /go/src/github.com/networkservicemesh/networkservicemesh/
    docker:
      - image: circleci/golang:1.11
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export BUILD_TAG="circle-${CIRCLE_BUILD_NUM}"
            export TAG="$BUILD_TAG"
            make docker-crossconnect-monitor-build
            make docker-crossconnect-monitor-push
  build-icmp-responder-nse:
    working_directory: /go/src/github.com/networkservicemesh/networkservicemesh/
    docker:
      - image: circleci/golang:1.11
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export BUILD_TAG="circle-${CIRCLE_BUILD_NUM}"
            export TAG="$BUILD_TAG"
            make docker-icmp-responder-nse-build
            make docker-icmp-responder-nse-push

  build-vppagent-icmp-responder-nse:
    working_directory: /go/src/github.com/networkservicemesh/networkservicemesh/
    docker:
      - image: circleci/golang:1.11
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export BUILD_TAG="circle-${CIRCLE_BUILD_NUM}"
            export TAG="$BUILD_TAG"
            make docker-vppagent-icmp-responder-nse-build
            make docker-vppagent-icmp-responder-nse-push
  build-vppagent-nsc:
    working_directory: /go/src/github.com/networkservicemesh/networkservicemesh/
    docker:
      - image: circleci/golang:1.11
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export BUILD_TAG="circle-${CIRCLE_BUILD_NUM}"
            export TAG="$BUILD_TAG"
            make docker-vppagent-nsc-build
            make docker-vppagent-nsc-push
  build-nsc:
    working_directory: /go/src/github.com/networkservicemesh/networkservicemesh/
    docker:
      - image: circleci/golang:1.11
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export BUILD_TAG="circle-${CIRCLE_BUILD_NUM}"
            export TAG="$BUILD_TAG"
            make docker-nsc-build
            make docker-nsc-push
  build-vppagent-dataplane:
    working_directory: /go/src/github.com/networkservicemesh/networkservicemesh/
    docker:
      - image: circleci/golang:1.11
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export BUILD_TAG="circle-${CIRCLE_BUILD_NUM}"
            export TAG="$BUILD_TAG"
            make docker-vppagent-dataplane-build
            make docker-vppagent-dataplane-push
workflows:
  version: 2
  build-and-test:
    jobs:
      - gomod
      - shellcheck
      - yamllint
      - build:
          requires:
          - gomod
      - build-nsmd:
          requires:
          - gomod
          - shellcheck
          - yamllint
      - build-nsmd-k8s:
          requires:
            - gomod
      - build-crossconnect-monitor:
          requires:
            - gomod
      - build-nsmdp:
          requires:
            - gomod
      - build-icmp-responder-nse:
          requires:
            - gomod
      - build-vppagent-icmp-responder-nse:
          requires:
            - gomod
      - build-vppagent-nsc:
          requires:
            - gomod
      - build-nsc:
          requires:
            - gomod
      - build-vppagent-dataplane:
          requires:
            - gomod
      - unittests:
          requires:
            - gomod
      - packet-deploy:
          requires:
            - gomod
      - packet-integration-tests:
          requires:
            - build-nsmd
            - build-nsmd-k8s
            - build-nsmdp
            - build-crossconnect-monitor
            - build-icmp-responder-nse
            - build-vppagent-icmp-responder-nse
            - build-vppagent-nsc
            - build-nsc
            - packet-deploy
      - packet-destroy:
          requires:
            - packet-integration-tests
