---
name: CI
on: pull_request

jobs:
  gobuild:
    name: Go Build & Unit Test
    runs-on: ubuntu-18.04
    steps:

      - name: Set up Go 1.12
        uses: actions/setup-go@v1
        with:
          go-version: 1.12
        id: go
      - name: Check out code
        uses: actions/checkout@v1
      - name: Get dependencies
        run: ./scripts/go-mod-download.sh
        env:
          GOPROXY: https://proxy.golang.org/
      - name: go vet
        run: go vet -v --all ./...
      - name: Build
        run: go build -v ./...
      - name: Go Test
        run: go test ./test/integration --json --list .* -tags basic recover usecase | tee test_log.json
      # - name: Upload Test Results
      #   env:
      #     REPORT_CI_API_TOKEN: ${{ secrets.REPORT_CI_API_TOKEN }}
      #   run: curl https://report.ci/upload.py > /tmp/upload.py;python /tmp/upload.py --token ${REPORT_CI_API_TOKEN}


  yamllint:
    name: Yamllint
    runs-on: ubuntu-18.04
    steps:
      - name: Check out code
        uses: actions/checkout@v1

      - name: Install Yamllint
        run: |
          pip install --user yamllint
          python2.7 -m site --user-base
      - name: yamllint
        run: ~/.local/bin/yamllint -c .yamllint.yml $(git ls-files '*.yaml' '*.yml')
  shellcheck:
    name: Shell Check
    runs-on: ubuntu-18.04
    steps:
      - name: Check out code
        uses: actions/checkout@v1

      - name: Install Shellcheck
        run: |
          ./.circleci/install-shellcheck.sh
  codeformatting:
    name: Check Code Formating
    runs-on: ubuntu-18.04
    steps:
      - name: Check out code
        uses: actions/checkout@v1
      - name: Set up Go 1.12
        uses: actions/setup-go@v1
        with:
          go-version: 1.12
      - name: Get dependencies
        run: ./scripts/go-mod-download.sh
        env:
          GOPROXY: https://proxy.golang.org/
      - name: Check Code Formating
        run: |
          export PATH=$(go env GOPATH)/bin/:${PATH}
          make install-formatter
          make format
          git diff --exit-code || (echo 'Seems like your Go files are not properly formatted. Run `make format` in your branch and commit the changes.' && exit 1)
  test-helm-charts:
    name: Test Helm Charts
    runs-on: ubuntu-18.04
    steps:
      - name: Check out code
        uses: actions/checkout@v1
      - name: Test Helm Charts
        run: |
          ./.github/workflows/scripts/test-charts.sh

  build-container:
    strategy:
      matrix:
        container: [nsm-coredns, nsmd, nsmd-k8s, nsmdp, proxy-nsmd, proxy-nsmd-k8s, admission-webhook, crossconnect-monitor, test-common, vpp-test-common, nsm-init, nsm-monitor, vppagent-dataplane, vppagent-dataplane-dev, kernel-forwarder]
    name: Build ${{ matrix.container }} container
    runs-on: ubuntu-18.04
    needs: [gobuild, yamllint, shellcheck, codeformatting]
    steps:
      - name: Check out code
        uses: actions/checkout@v1
      - name: Build
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          CONTAINER_REPO: networkservicemeshci
        run: |
          export COMMIT="${GITHUB_SHA:8:8}"
          export TAG="${COMMIT}"
          make docker-${{ matrix.container }}-push

  integration-tests:
    name: Integration tests
    runs-on: ubuntu-18.04
    needs: build-container
    steps:
      - name: Check out code
        uses: actions/checkout@v1
      - name: Install yq
        run: sudo ./.circleci/install-yq.sh
      - name: Install other stuff
        run: |
          sudo ./.circleci/set-nameserver.sh sudo
          sudo apt-get install gettext-base
      - name: Install Kubectl
        run: sudo ./scripts/install-kubectl.sh
      - name: Install GKE deps
        run: sudo ./scripts/gke/install-gcloud-sdk.sh
      - name: Install Azure deps
        run: sudo ./scripts/azure/install-azure-cli.sh
      - name: Init AWS
        run: |
            ./scripts/aws/aws-init.sh
            sudo cp "$HOME/bin/aws-iam-authenticator" /usr/local/bin/aws-iam-authenticator
      - name: Install Helm
        run: |
            ./scripts/install-helm.sh
            sudo cp "$HOME/bin/helm" /usr/local/bin/helm
      - name: Downloading go deps
        run: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export CONTAINER_TAG="${COMMIT}"
            ./scripts/go-mod-download.sh
      - name: Running integration tests
        env:
          NSM_NAMESPACE: "nsm-system"
        run: |
            export COMMIT="${CIRCLE_SHA1:8:8}"
            export CONTAINER_TAG="${COMMIT}"
            export REPO="networkservicemeshci"
            export CONTAINER_REPO=${REPO}
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              export STORE_LOGS_IN_ANY_CASES=true
            fi
            CGO_ENABLED=0 GOOS=linux go build -o ./cloudtest ./test/cloudtest/cmd/cloudtest
            ./cloudtest
